{"version":3,"file":"ScrollTrigger.min.js","sources":["../src/ScrollTrigger.js"],"sourcesContent":["/*!\n * ScrollTrigger 3.4.1\n * https://greensock.com\n *\n * @license Copyright 2008-2020, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\n\nlet gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _raf, _request, _toArray, _clamp, _time2, _syncInterval, _refreshing, _pointerIsDown, _transformProp, _i, _prevWidth, _prevHeight, _autoRefresh, _sort,\n\t_limitCallbacks, // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.\n\t_startup = 1,\n\t_proxies = [],\n\t_scrollers = [],\n\t_getTime = Date.now,\n\t_time1 = _getTime(),\n\t_lastScrollTime = 0,\n\t_enabled = 1,\n\t_passThrough = v => v,\n\t_windowExists = () => typeof(window) !== \"undefined\",\n\t_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),\n\t_isViewport = e => !!~_root.indexOf(e),\n\t_getProxyProp = (element, property) => ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property],\n\t_getScrollFunc = (element, {s, sc}) => {\n\t\tlet i = _scrollers.indexOf(element),\n\t\t\tfunc = ~i ? _scrollers[i+1] : _getProxyProp(element, s) || (_isViewport(element) ? sc : function(value) { return arguments.length ? (element[s] = value) : element[s]; });\n\t\t!~i && _scrollers.push(element, func);\n\t\treturn func;\n\t},\n\t_getBoundsFunc = element => _getProxyProp(element, \"getBoundingClientRect\") || (_isViewport(element) ? () => {_winOffsets.width = _win.innerWidth; _winOffsets.height = _win.innerHeight; return _winOffsets;} : () => _getBounds(element)),\n\t_getSizeFunc = (scroller, isViewport, {d, d2, a}) => (a = _getProxyProp(scroller, \"getBoundingClientRect\")) ? () => a()[d] : () => (isViewport ? _win[\"inner\" + d2] : scroller[\"client\" + d2]) || 0,\n\t_getOffsetsFunc = (element, isViewport) => !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : () => _winOffsets,\n\t_maxScroll = (element, {s, d2, d, a}) => (s = \"scroll\" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? Math.max(_docEl[s], _body[s]) - (_win[\"inner\" + d2] || _docEl[\"client\" + d2] || _body[\"client\" + d2]) : element[s] - element[\"offset\" + d2],\n\t_iterateAutoRefresh = (func, events) => {\n\t\tfor (let i = 0; i < _autoRefresh.length; i += 3) {\n\t\t\t(!events || ~events.indexOf(_autoRefresh[i+1])) && func(_autoRefresh[i], _autoRefresh[i+1], _autoRefresh[i+2]);\n\t\t}\n\t},\n\t_isString = value => typeof(value) === \"string\",\n\t_isFunction = value => typeof(value) === \"function\",\n\t_isNumber = value => typeof(value) === \"number\",\n\t_isObject = value => typeof(value) === \"object\",\n\t_callIfFunc = value => _isFunction(value) && value(),\n\t_combineFunc = (f1, f2) => () => {\n\t\tlet result1 = _callIfFunc(f1),\n\t\t\tresult2 = _callIfFunc(f2);\n\t\treturn () => {\n\t\t\t_callIfFunc(result1);\n\t\t\t_callIfFunc(result2);\n\t\t}\n\t},\n\t_abs = Math.abs,\n\t_scrollLeft = \"scrollLeft\",\n\t_scrollTop = \"scrollTop\",\n\t_left = \"left\",\n\t_top = \"top\",\n\t_right = \"right\",\n\t_bottom = \"bottom\",\n\t_width = \"width\",\n\t_height = \"height\",\n\t_Right = \"Right\",\n\t_Left = \"Left\",\n\t_Top = \"Top\",\n\t_Bottom = \"Bottom\",\n\t_padding = \"padding\",\n\t_margin = \"margin\",\n\t_Width = \"Width\",\n\t_Height = \"Height\",\n\t_px = \"px\",\n\t_horizontal = {s: _scrollLeft, p: _left, p2: _Left, os: _right, os2: _Right, d: _width, d2: _Width, a: \"x\", sc: function(value) { return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0}},\n\t_vertical = {s: _scrollTop, p: _top, p2: _Top, os: _bottom, os2: _Bottom, d: _height, d2: _Height, a: \"y\", op: _horizontal, sc: function(value) { return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0}},\n\t_getComputedStyle = element => _win.getComputedStyle(element),\n\t_makePositionable = element => element.style.position = (_getComputedStyle(element).position === \"absolute\") ? \"absolute\" : \"relative\", // if the element already has position: absolute, leave that, otherwise make it position: relative\n\t_setDefaults = (obj, defaults) => {\n\t\tfor (let p in defaults) {\n\t\t\t(p in obj) || (obj[p] = defaults[p]);\n\t\t}\n\t\treturn obj;\n\t},\n\t//_isInViewport = element => (element = _getBounds(element)) && !(element.top > (_win.innerHeight || _docEl.clientHeight) || element.bottom < 0 || element.left > (_win.innerWidth || _docEl.clientWidth) || element.right < 0) && element,\n\t_getBounds = (element, withoutTransforms) => {\n\t\tlet tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== \"matrix(1, 0, 0, 1, 0, 0)\" && gsap.to(element, {x: 0, y: 0, xPercent: 0, yPercent: 0, rotation: 0, rotationX: 0, rotationY: 0, scale: 1, skewX: 0, skewY: 0}).progress(1),\n\t\t\tbounds = element.getBoundingClientRect();\n\t\ttween && tween.progress(0).kill();\n\t\treturn bounds;\n\t},\n\t_getSize = (element, {d2}) => element[\"offset\" + d2] || element[\"client\" + d2] || 0,\n\t_getLabels = animation => {\n\t\treturn value => {\n\t\t\tlet a = [],\n\t\t\t\tlabels = animation.labels,\n\t\t\t\tduration = animation.duration(),\n\t\t\t\tp;\n\t\t\tfor (p in labels) {\n\t\t\t\ta.push(labels[p] / duration);\n\t\t\t}\n\t\t\treturn gsap.utils.snap(a, value);\n\t\t};\n\t},\n\t_multiListener = (func, element, types, callback) => types.split(\",\").forEach(type => func(element, type, callback)),\n\t_addListener = (element, type, func) => element.addEventListener(type, func, {passive: true}),\n\t_removeListener = (element, type, func) => element.removeEventListener(type, func),\n\t_markerDefaults = {startColor: \"green\", endColor: \"red\", indent: 0, fontSize: \"16px\", fontWeight:\"normal\"},\n\t_defaults = {toggleActions: \"play\", anticipatePin: 0},\n\t_keywords = {top: 0, left: 0, center: 0.5, bottom: 1, right: 1},\n\t_offsetToPx = (value, size) => {\n\t\tif (_isString(value)) {\n\t\t\tlet eqIndex = value.indexOf(\"=\"),\n\t\t\t\trelative = ~eqIndex ? +(value.charAt(eqIndex-1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;\n\t\t\tif (relative) {\n\t\t\t\t(value.indexOf(\"%\") > eqIndex) && (relative *= size / 100);\n\t\t\t\tvalue = value.substr(0, eqIndex-1);\n\t\t\t}\n\t\t\tvalue = relative + ((value in _keywords) ? _keywords[value] * size : ~value.indexOf(\"%\") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);\n\t\t}\n\t\treturn value;\n\t},\n\t_createMarker = (type, name, container, direction, {startColor, endColor, fontSize, indent, fontWeight}, offset, matchWidthEl) => {\n\t\tlet e = _doc.createElement(\"div\"),\n\t\t\tuseFixedPosition = _isViewport(container) || _getProxyProp(container, \"pinType\") === \"fixed\",\n\t\t\tisScroller = type.indexOf(\"scroller\") !== -1,\n\t\t\tparent = useFixedPosition ? _body : container,\n\t\t\tisStart = type.indexOf(\"start\") !== -1,\n\t\t\tcolor = isStart ? startColor : endColor,\n\t\t\tcss = \"border-color:\" + color + \";font-size:\" + fontSize + \";color:\" + color + \";font-weight:\" + fontWeight + \";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;\";\n\t\tcss += \"position:\" + (isScroller && useFixedPosition ? \"fixed;\" : \"absolute;\");\n\t\t(isScroller || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + \":\" + (offset + parseFloat(indent)) + \"px;\");\n\t\tmatchWidthEl && (css += \"box-sizing:border-box;text-align:left;width:\" + matchWidthEl.offsetWidth + \"px;\");\n\t\te._isStart = isStart;\n\t\te.setAttribute(\"class\", \"gsap-marker-\" + type);\n\t\te.style.cssText = css;\n\t\te.innerText = name || name === 0 ? type + \"-\" + name : type;\n\t\tparent.insertBefore(e, parent.children[0]);\n\t\te._offset = e[\"offset\" + direction.op.d2];\n\t\t_positionMarker(e, 0, direction, isStart);\n\t\treturn e;\n\t},\n\t_positionMarker = (marker, start, direction, flipped) => {\n\t\tlet vars = {display: \"block\"},\n\t\t\tside = direction[flipped ? \"os2\" : \"p2\"],\n\t\t\toppositeSide = direction[flipped ? \"p2\" : \"os2\"];\n\t\tmarker._isFlipped = flipped;\n\t\tvars[direction.a + \"Percent\"] = flipped ? -100 : 0;\n\t\tvars[direction.a] = flipped ? 1 : 0;\n\t\tvars[\"border\" + side + _Width] = 1;\n\t\tvars[\"border\" + oppositeSide + _Width] = 0;\n\t\tvars[direction.p] = start;\n\t\tgsap.set(marker, vars);\n\t},\n\t_triggers = [],\n\t_ids = {},\n\t_sync = () => _request || (_request = _raf(_updateAll)),\n\t_onScroll = () => {\n\t\tif (!_request) {\n\t\t\t_request = _raf(_updateAll);\n\t\t\t_lastScrollTime || _dispatch(\"scrollStart\");\n\t\t\t_lastScrollTime = _getTime();\n\t\t}\n\t},\n\t_onResize = () => !_refreshing && _resizeDelay.restart(true), // ignore resizes triggered by refresh()\n\t_listeners = {},\n\t_emptyArray = [],\n\t_media = [],\n\t_creatingMedia, // when ScrollTrigger.matchMedia() is called, we record the current media key here (like \"(min-width: 800px)\") so that we can assign it to everything that's created during that call. Then we can revert just those when necessary. In the ScrollTrigger's init() call, the _creatingMedia is recorded as a \"media\" property on the instance.\n\t_lastMediaTick,\n\t_onMediaChange = e => {\n\t\tlet tick = gsap.ticker.frame,\n\t\t\tmatches = [],\n\t\t\ti = 0;\n\t\tif (_lastMediaTick !== tick || _startup) {\n\t\t\t_revertAll();\n\t\t\tfor (; i < _media.length; i+=3) {\n\t\t\t\t_win.matchMedia(_media[i]).matches ? matches.push(i) : _revertAll(1, _media[i]) || (_isFunction(_media[i+2]) && _media[i+2]()); // Firefox doesn't update the \"matches\" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.\n\t\t\t}\n\t\t\t_revertRecorded(); // in case killing/reverting any of the animations actually added inline styles back.\n\t\t\tfor (i = 0; i < matches.length; i++) {\n\t\t\t\t_creatingMedia = _media[matches[i]];\n\t\t\t\t_media[matches[i]+2] = _media[matches[i]+1](e);\n\t\t\t}\n\t\t\t_creatingMedia = 0;\n\t\t\t_refreshAll(0, 1);\n\t\t\t_lastMediaTick = tick;\n\t\t}\n\t},\n\t_softRefresh = () => _removeListener(ScrollTrigger, \"scrollEnd\", _softRefresh) || _refreshAll(true),\n\t_dispatch = type => (_listeners[type] && _listeners[type].map(f => f())) || _emptyArray,\n\t_savedStyles = [], // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.\n\t_revertRecorded = media => {\n\t\tfor (let i = 0; i < _savedStyles.length; i+=4) {\n\t\t\tif (!media || _savedStyles[i+3] === media) {\n\t\t\t\t_savedStyles[i].style.cssText = _savedStyles[i+1];\n\t\t\t\t_savedStyles[i+2].uncache = 1;\n\t\t\t}\n\t\t}\n\t},\n\t_revertAll = (kill, media) => {\n\t\tlet trigger;\n\t\tfor (_i = 0; _i < _triggers.length; _i++) {\n\t\t\ttrigger = _triggers[_i];\n\t\t\tif (!media || trigger.media === media) {\n\t\t\t\tif (kill) {\n\t\t\t\t\ttrigger.kill(1);\n\t\t\t\t} else {\n\t\t\t\t\ttrigger.scroll.rec || (trigger.scroll.rec = trigger.scroll()); // record the scroll positions so that in each refresh() we can ensure that it doesn't shift. Remember, pinning can make things change around, especially if the same element is pinned multiple times. If one was already recorded, don't re-record because unpinning may have occurred and made it shorter.\n\t\t\t\t\ttrigger.revert();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_revertRecorded(media);\n\t\tmedia || _dispatch(\"revert\");\n\t},\n\t_refreshAll = (force, skipRevert) => {\n\t\tif (_lastScrollTime && !force) {\n\t\t\t_addListener(ScrollTrigger, \"scrollEnd\", _softRefresh);\n\t\t\treturn;\n\t\t}\n\t\tlet refreshInits = _dispatch(\"refreshInit\");\n\t\t_sort && ScrollTrigger.sort();\n\t\tskipRevert || _revertAll();\n\t\tfor (_i = 0; _i < _triggers.length; _i++) {\n\t\t\t_triggers[_i].refresh();\n\t\t}\n\t\trefreshInits.forEach(result => result && result.render && result.render(-1)); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.\n\t\t_i = _triggers.length;\n\t\twhile (_i--) {\n\t\t\t_triggers[_i].scroll.rec = 0;\n\t\t}\n\t\t_dispatch(\"refresh\");\n\t},\n\t_lastScroll = 0,\n\t_direction = 1,\n\t_updateAll = () => {\n\t\tlet l = _triggers.length,\n\t\t\ttime = _getTime(),\n\t\t\trecordVelocity = time - _time1 >= 50,\n\t\t\tscroll = l && _triggers[0].scroll();\n\t\t_direction = _lastScroll > scroll ? -1 : 1;\n\t\t_lastScroll = scroll;\n\t\tif (recordVelocity) {\n\t\t\tif (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {\n\t\t\t\t_lastScrollTime = 0;\n\t\t\t\t_dispatch(\"scrollEnd\");\n\t\t\t}\n\t\t\t_time2 = _time1;\n\t\t\t_time1 = time;\n\t\t}\n\t\tif (_direction < 0) {\n\t\t\t_i = l;\n\t\t\twhile (_i--) {\n\t\t\t\t_triggers[_i].update(0, recordVelocity);\n\t\t\t}\n\t\t\t_direction = 1;\n\t\t} else {\n\t\t\tfor (_i = 0; _i < l; _i++) {\n\t\t\t\t_triggers[_i] && _triggers[_i].update(0, recordVelocity);\n\t\t\t}\n\t\t}\n\t\t_request = 0;\n\t},\n\t_propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, \"display\", \"flexShrink\", \"float\"],\n\t_stateProps = _propNamesToCopy.concat([_width, _height, \"boxSizing\", \"max\" + _Width, \"max\" + _Height, \"position\", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),\n\t_swapPinOut = (pin, spacer, state) => {\n\t\t_setState(state);\n\t\tif (pin.parentNode === spacer) {\n\t\t\tlet parent = spacer.parentNode;\n\t\t\tif (parent) {\n\t\t\t\tparent.insertBefore(pin, spacer);\n\t\t\t\tparent.removeChild(spacer);\n\t\t\t}\n\t\t}\n\t},\n\t_swapPinIn = (pin, spacer, cs) => {\n\t\tif (pin.parentNode !== spacer) {\n\t\t\tlet i = _propNamesToCopy.length,\n\t\t\t\tspacerStyle = spacer.style,\n\t\t\t\tpinStyle = pin.style,\n\t\t\t\tp;\n\t\t\twhile (i--) {\n\t\t\t\tp = _propNamesToCopy[i];\n\t\t\t\tspacerStyle[p] = cs[p];\n\t\t\t}\n\t\t\tspacerStyle.position = cs.position === \"absolute\" ? \"absolute\" : \"relative\";\n\t\t\t(cs.display === \"inline\") && (spacerStyle.display = \"inline-block\");\n\t\t\tpinStyle[_bottom] = pinStyle[_right] = \"auto\";\n\t\t\tspacerStyle.overflow = \"visible\";\n\t\t\tspacerStyle.boxSizing = \"border-box\";\n\t\t\tspacerStyle[_width] = _getSize(pin, _horizontal) + _px;\n\t\t\tspacerStyle[_height] = _getSize(pin, _vertical) + _px;\n\t\t\tspacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = \"0\";\n\t\t\tpinStyle[_width] = cs[_width];\n\t\t\tpinStyle[_height] = cs[_height];\n\t\t\tpinStyle[_padding] = cs[_padding];\n\t\t\tpin.parentNode.insertBefore(spacer, pin);\n\t\t\tspacer.appendChild(pin);\n\t\t}\n\t},\n\t_capsExp = /([A-Z])/g,\n\t_setState = state => {\n\t\tif (state) {\n\t\t\tlet style = state.t.style,\n\t\t\t\tl = state.length,\n\t\t\t\ti = 0,\n\t\t\t\tp, value;\n\t\t\tfor (; i < l; i +=2) {\n\t\t\t\tvalue = state[i+1];\n\t\t\t\tp = state[i];\n\t\t\t\tif (value) {\n\t\t\t\t\tstyle[p] = value;\n\t\t\t\t} else if (style[p]) {\n\t\t\t\t\tstyle.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t_getState = element => { // returns an array with alternating values like [property, value, property, value] and a \"t\" property pointing to the target (element). Makes it fast and cheap.\n\t\tlet l = _stateProps.length,\n\t\t\tstyle = element.style,\n\t\t\tstate = [],\n\t\t\ti = 0;\n\t\tfor (; i < l; i++) {\n\t\t\tstate.push(_stateProps[i], style[_stateProps[i]]);\n\t\t}\n\t\tstate.t = element;\n\t\treturn state;\n\t},\n\t_copyState = (state, override, omitOffsets) => {\n\t\tlet result = [],\n\t\t\tl = state.length,\n\t\t\ti = omitOffsets ? 8 : 0, // skip top, left, right, bottom if omitOffsets is true\n\t\t\tp;\n\t\tfor (; i < l; i += 2) {\n\t\t\tp = state[i];\n\t\t\tresult.push(p, (p in override) ? override[p] : state[i+1]);\n\t\t}\n\t\tresult.t = state.t;\n\t\treturn result;\n\t},\n\t_winOffsets = {left:0, top:0},\n\t_parsePosition = (value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax) => {\n\t\t_isFunction(value) && (value = value(self));\n\t\tif (_isString(value) && value.substr(0,3) === \"max\") {\n\t\t\tvalue = scrollerMax + (value.charAt(4) === \"=\" ? _offsetToPx(\"0\" + value.substr(3), scrollerSize) : 0);\n\t\t}\n\t\tif (!_isNumber(value)) {\n\t\t\t_isFunction(trigger) && (trigger = trigger(self));\n\t\t\tlet element = _toArray(trigger)[0] || _body,\n\t\t\t\tbounds = _getBounds(element) || {},\n\t\t\t\toffsets = value.split(\" \"),\n\t\t\t\tlocalOffset, globalOffset, display;\n\t\t\tif ((!bounds || (!bounds.left && !bounds.top)) && _getComputedStyle(element).display === \"none\") { // if display is \"none\", it won't report getBoundingClientRect() properly\n\t\t\t\tdisplay = element.style.display;\n\t\t\t\telement.style.display = \"block\";\n\t\t\t\tbounds = _getBounds(element);\n\t\t\t\tdisplay ? (element.style.display = display) : element.style.removeProperty(\"display\");\n\t\t\t}\n\t\t\tlocalOffset = _offsetToPx(offsets[0], bounds[direction.d]);\n\t\t\tglobalOffset = _offsetToPx(offsets[1] || \"0\", scrollerSize);\n\t\t\tvalue = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;\n\t\t\tmarkerScroller && _positionMarker(markerScroller, globalOffset, direction, (scrollerSize - globalOffset < 20 || (markerScroller._isStart && globalOffset > 20)));\n\t\t\tscrollerSize -= scrollerSize - globalOffset; // adjust for the marker\n\t\t} else if (markerScroller) {\n\t\t\t_positionMarker(markerScroller, scrollerSize, direction, true);\n\t\t}\n\t\tif (marker) {\n\t\t\tlet position = value + scrollerSize,\n\t\t\t\tisStart = marker._isStart;\n\t\t\tscrollerMax = \"scroll\" + direction.d2;\n\t\t\t_positionMarker(marker, position, direction, (isStart && position > 20) || (!isStart && (useFixedPosition ? Math.max(_body[scrollerMax], _docEl[scrollerMax]) : marker.parentNode[scrollerMax]) <= position + 1));\n\t\t\tif (useFixedPosition) {\n\t\t\t\tscrollerBounds = _getBounds(markerScroller);\n\t\t\t\tuseFixedPosition && (marker.style[direction.op.p] = (scrollerBounds[direction.op.p] - direction.op.m - marker._offset) + _px);\n\t\t\t}\n\t\t}\n\t\treturn Math.round(value);\n\t},\n\t_prefixExp = /(?:webkit|moz|length)/i,\n\t_reparent = (element, parent) => {\n\t\tif (element.parentNode !== parent) {\n\t\t\tlet style = element.style,\n\t\t\t\tp, cs;\n\t\t\tif (parent === _body) {\n\t\t\t\telement._stOrig = style.cssText; // record original inline styles so we can revert them later\n\t\t\t\tcs = _getComputedStyle(element);\n\t\t\t\tfor (p in cs) { // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.\n\t\t\t\t\tif (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === \"string\" && p !== \"0\") {\n\t\t\t\t\t\tstyle[p] = cs[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstyle.cssText = element._stOrig;\n\t\t\t}\n\t\t\tparent.appendChild(element);\n\t\t}\n\t},\n\t// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)\n\t_getTweenCreator = (scroller, direction) => {\n\t\tlet getScroll = _getScrollFunc(scroller, direction),\n\t\t\tprop = \"_scroll\" + direction.p2, // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.\n\t\t\tlastScroll,\n\t\t\tgetTween = (scrollTo, vars, initialValue, change1, change2) => {\n\t\t\t\tlet tween = getTween.tween,\n\t\t\t\t\tonComplete = vars.onComplete,\n\t\t\t\t\tmodifiers = {};\n\t\t\t\ttween && tween.kill();\n\t\t\t\tlastScroll = getScroll();\n\t\t\t\tvars[prop] = scrollTo;\n\t\t\t\tvars.modifiers = modifiers;\n\t\t\t\tmodifiers[prop] = value => {\n\t\t\t\t\tif (Math.abs(getScroll() - lastScroll) > 7) { // if the user scrolls, kill the tween. Need a margin of error because some browsers like iOS Safari misreport the scroll position!\n\t\t\t\t\t\ttween.kill();\n\t\t\t\t\t\tgetTween.tween = 0;\n\t\t\t\t\t\tvalue = getScroll();\n\t\t\t\t\t} else if (change1) {\n\t\t\t\t\t\tvalue = initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio;\n\t\t\t\t\t}\n\t\t\t\t\treturn (lastScroll = Math.round(value));\n\t\t\t\t};\n\t\t\t\tvars.onComplete = () => {\n\t\t\t\t\tgetTween.tween = 0;\n\t\t\t\t\tonComplete && onComplete.call(tween);\n\t\t\t\t};\n\t\t\t\ttween = getTween.tween = gsap.to(scroller, vars);\n\t\t\t\treturn tween;\n\t\t\t};\n\t\tscroller[prop] = getScroll;\n\t\treturn getTween;\n\t};\n\n_horizontal.op = _vertical;\n\n\n\nexport class ScrollTrigger {\n\n\tconstructor(vars, animation) {\n\t\t_coreInitted || ScrollTrigger.register(gsap) || console.warn(\"Please gsap.registerPlugin(ScrollTrigger)\");\n\t\tthis.init(vars, animation);\n\t}\n\n\tinit(vars, animation) {\n\t\tthis.progress = 0;\n\t\tthis.vars && this.kill(1); // in case it's being initted again\n\t\tif (!_enabled) {\n\t\t\tthis.update = this.refresh = this.kill = _passThrough;\n\t\t\treturn;\n\t\t}\n\t\tvars = _setDefaults((_isString(vars) || _isNumber(vars) || vars.nodeType) ? {trigger: vars} : vars, _defaults);\n\t\tlet direction = vars.horizontal ? _horizontal : _vertical,\n\t\t\t{onUpdate, toggleClass, id, onToggle, onRefresh, scrub, trigger, pin, pinSpacing, invalidateOnRefresh, anticipatePin, onScrubComplete, onSnapComplete, once, snap, pinReparent} = vars,\n\t\t\tisToggle = !scrub && scrub !== 0,\n\t\t\tscroller = _toArray(vars.scroller || _win)[0],\n\t\t\tscrollerCache = gsap.core.getCache(scroller),\n\t\t\tisViewport = _isViewport(scroller),\n\t\t\tuseFixedPosition = isViewport || _getProxyProp(scroller, \"pinType\") === \"fixed\",\n\t\t\tcallbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],\n\t\t\ttoggleActions = isToggle && (once ? \"play\" : vars.toggleActions).split(\" \"),\n\t\t\tmarkers = \"markers\" in vars ? vars.markers : _defaults.markers,\n\t\t\tborderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0,\n\t\t\tself = this,\n\t\t\tonRefreshInit = vars.onRefreshInit && (() => vars.onRefreshInit(self)),\n\t\t\tgetScrollerSize = _getSizeFunc(scroller, isViewport, direction),\n\t\t\tgetScrollerOffsets = _getOffsetsFunc(scroller, isViewport),\n\t\t\ttweenTo, pinCache, snapFunc, isReverted, scroll1, scroll2, start, end, markerStart, markerEnd, markerStartTrigger, markerEndTrigger, markerVars,\n\t\t\tchange, pinOriginalState, pinActiveState, pinState, spacer, offset, pinGetter, pinSetter, pinStart, pinChange, spacingStart, spacingActive, markerStartSetter,\n\t\t\tmarkerEndSetter, cs, snap1, snap2, scrubScrollTime, scrubTween, scrubSmooth, snapDurClamp, snapDelayedCall, prevProgress, prevScroll, prevAnimProgress;\n\n\t\tself.media = _creatingMedia;\n\t\tanticipatePin *= 45;\n\t\t_triggers.push(self);\n\t\tself.scroller = scroller;\n\t\tself.scroll = _getScrollFunc(scroller, direction);\n\t\tscroll1 = self.scroll();\n\t\tself.vars = vars;\n\t\tanimation = animation || vars.animation;\n\t\t(\"refreshPriority\" in vars) && (_sort = 1);\n\t\tscrollerCache.tweenScroll = scrollerCache.tweenScroll || {\n\t\t\ttop: _getTweenCreator(scroller, _vertical),\n\t\t\tleft: _getTweenCreator(scroller, _horizontal)\n\t\t};\n\t\tself.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];\n\t\tif (animation) {\n\t\t\tanimation.vars.lazy = false;\n\t\t\tanimation._initted || (animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.render(0, true, true));\n\t\t\tself.animation = animation.pause();\n\t\t\tanimation.scrollTrigger = self;\n\t\t\tscrubSmooth = _isNumber(scrub) && scrub;\n\t\t\tscrubSmooth && (scrubTween = gsap.to(animation, {ease: \"power3\", duration: scrubSmooth, onComplete: () => onScrubComplete && onScrubComplete(self)}));\n\t\t\tsnap1 = 0;\n\t\t\tid || (id = animation.vars.id);\n\t\t}\n\t\tif (snap) {\n\t\t\t_isObject(snap) || (snap = {snapTo: snap});\n\t\t\tgsap.set(isViewport ? [_body, _docEl] : scroller, {scrollBehavior: \"auto\"}); // smooth scrolling doesn't work with snap.\n\t\t\tsnapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === \"labels\" ? _getLabels(animation) : gsap.utils.snap(snap.snapTo);\n\t\t\tsnapDurClamp = snap.duration || {min: 0.1, max: 2};\n\t\t\tsnapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);\n\t\t\tsnapDelayedCall = gsap.delayedCall(snap.delay || (scrubSmooth / 2) || 0.1, () => {\n\t\t\t\tif (!_lastScrollTime || (_lastScrollTime === scrubScrollTime && !_pointerIsDown)) {\n\t\t\t\t\tlet totalProgress = animation && !isToggle ? animation.totalProgress() : self.progress,\n\t\t\t\t\t\tvelocity = ((totalProgress - snap2) / (_getTime() - _time2) * 1000) || 0,\n\t\t\t\t\t\tchange1 = _abs(velocity / 2) * velocity / 0.185,\n\t\t\t\t\t\tnaturalEnd = totalProgress + change1,\n\t\t\t\t\t\tendValue = _clamp(0, 1, snapFunc(naturalEnd, self)),\n\t\t\t\t\t\tchange2 = endValue - totalProgress - change1,\n\t\t\t\t\t\tscroll = self.scroll(),\n\t\t\t\t\t\tendScroll = Math.round(start + endValue * change),\n\t\t\t\t\t\ttween = tweenTo.tween;\n\t\t\t\t\tif (scroll <= end && scroll >= start) {\n\t\t\t\t\t\tif (tween && !tween._initted) { // there's an overlapping snap! So we must figure out which one is closer and let that tween live.\n\t\t\t\t\t\t\tif (tween.data <= Math.abs(endScroll - scroll)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween.kill();\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttweenTo(endScroll, {\n\t\t\t\t\t\t\tduration: snapDurClamp(_abs( (Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05) || 0)),\n\t\t\t\t\t\t\tease: snap.ease || \"power3\",\n\t\t\t\t\t\t\tdata: Math.abs(endScroll - scroll), // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.\n\t\t\t\t\t\t\tonComplete: () => {\n\t\t\t\t\t\t\t\tsnap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;\n\t\t\t\t\t\t\t\tonSnapComplete && onSnapComplete(self);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, start + totalProgress * change, change1 * change, change2 * change);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsnapDelayedCall.restart(true);\n\t\t\t\t}\n\t\t\t}).pause();\n\t\t}\n\t\tid && (_ids[id] = self);\n\t\ttrigger = self.trigger = _toArray(trigger || pin)[0];\n\t\tpin = pin === true ? trigger : _toArray(pin)[0];\n\t\t_isString(toggleClass) && (toggleClass = {targets: trigger, className: toggleClass});\n\t\tif (pin) {\n\t\t\t(pinSpacing === false || pinSpacing === _margin) || (pinSpacing = _getComputedStyle(pin.parentNode).display === \"flex\" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default.\n\t\t\tself.pin = pin;\n\t\t\tvars.force3D !== false && gsap.set(pin, {force3D: true});\n\t\t\tpinCache = gsap.core.getCache(pin);\n\t\t\tif (!pinCache.spacer) { // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the \"original\" pin state after it has already been affected by another ScrollTrigger.\n\t\t\t\tpinCache.spacer = spacer = _doc.createElement(\"div\");\n\t\t\t\tspacer.setAttribute(\"class\", \"pin-spacer\" + (id ? \" pin-spacer-\" + id : \"\"));\n\t\t\t\tpinCache.pinState = pinOriginalState = _getState(pin);\n\t\t\t} else {\n\t\t\t\tpinOriginalState = pinCache.pinState;\n\t\t\t}\n\t\t\tself.spacer = spacer = pinCache.spacer;\n\t\t\tcs = _getComputedStyle(pin);\n\t\t\tspacingStart = cs[pinSpacing + direction.os2];\n\t\t\tpinGetter = gsap.getProperty(pin);\n\t\t\tpinSetter = gsap.quickSetter(pin, direction.a, _px);\n\t\t\t_swapPinIn(pin, spacer, cs);\n\t\t\tpinState = _getState(pin);\n\t\t}\n\t\tif (markers) {\n\t\t\tmarkerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;\n\t\t\tmarkerStartTrigger = _createMarker(\"scroller-start\", id, scroller, direction, markerVars, 0);\n\t\t\tmarkerEndTrigger = _createMarker(\"scroller-end\", id, scroller, direction, markerVars, 0, markerStartTrigger);\n\t\t\toffset = markerStartTrigger[\"offset\" + direction.op.d2];\n\t\t\tmarkerStart = _createMarker(\"start\", id, scroller, direction, markerVars, offset);\n\t\t\tmarkerEnd =_createMarker(\"end\", id, scroller, direction, markerVars, offset);\n\t\t\tif (!useFixedPosition) {\n\t\t\t\t_makePositionable(scroller);\n\t\t\t\tgsap.set([markerStartTrigger, markerEndTrigger], {force3D: true});\n\t\t\t\tmarkerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);\n\t\t\t\tmarkerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);\n\t\t\t}\n\t\t}\n\n\t\tself.revert = revert => {\n\t\t\tlet r = revert !== false || !self.enabled,\n\t\t\t\tprevRefreshing = _refreshing;\n\t\t\tif (r !== isReverted) {\n\t\t\t\tif (r) {\n\t\t\t\t\tprevScroll = Math.max(self.scroll(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.\n\t\t\t\t\tprevProgress = self.progress;\n\t\t\t\t\tprevAnimProgress = animation && animation.progress();\n\t\t\t\t}\n\t\t\t\tmarkerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.style.display = r ? \"none\" : \"block\");\n\t\t\t\t_refreshing = 1;\n\t\t\t\tself.update(r); // make sure the pin is back in its original position so that all the measurements are correct.\n\t\t\t\t_refreshing = prevRefreshing;\n\t\t\t\tpin && r && _swapPinOut(pin, spacer, pinOriginalState);\n\t\t\t\tisReverted = r;\n\t\t\t}\n\t\t}\n\n\n\t\tself.refresh = soft => {\n\t\t\tif (_refreshing || !self.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (pin && soft && _lastScrollTime) {\n\t\t\t\t_addListener(ScrollTrigger, \"scrollEnd\", _softRefresh);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_refreshing = 1;\n\t\t\tscrubTween && scrubTween.kill();\n\t\t\tinvalidateOnRefresh && animation && animation.progress(0).invalidate();\n\t\t\tisReverted || self.revert();\n\t\t\tlet size = getScrollerSize(),\n\t\t\t\tscrollerBounds = getScrollerOffsets(),\n\t\t\t\tmax = _maxScroll(scroller, direction),\n\t\t\t\toffset = 0,\n\t\t\t\totherPinOffset = 0,\n\t\t\t\tparsedEnd = vars.end,\n\t\t\t\tparsedEndTrigger = vars.endTrigger || trigger,\n\t\t\t\tparsedStart = vars.start || (pin || !trigger ? \"0 0\" : \"0 100%\"),\n\t\t\t\ttriggerIndex = (trigger && Math.max(0, _triggers.indexOf(self))) || 0,\n\t\t\t\ti = triggerIndex,\n\t\t\t\tcs, bounds, scroll, isVertical, override, curTrigger, curPin;\n\t\t\twhile (i--) { // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things \"rewind\" properly.\n\t\t\t\tcurPin = _triggers[i].pin;\n\t\t\t\tcurPin && (curPin === trigger || curPin === pin) && _triggers[i].revert();\n\t\t\t}\n\t\t\tstart = _parsePosition(parsedStart, trigger, size, direction, self.scroll(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max) || (pin ? -0.001 : 0);\n\t\t\t_isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));\n\t\t\tif (_isString(parsedEnd) && !parsedEnd.indexOf(\"+=\")) {\n\t\t\t\tif (~parsedEnd.indexOf(\" \")) {\n\t\t\t\t\tparsedEnd = (_isString(parsedStart) ? parsedStart.split(\" \")[0] : \"\") + parsedEnd;\n\t\t\t\t} else {\n\t\t\t\t\toffset = _offsetToPx(parsedEnd.substr(2), size);\n\t\t\t\t\tparsedEnd = _isString(parsedStart) ? parsedStart : start + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.\n\t\t\t\t\tparsedEndTrigger = trigger;\n\t\t\t\t}\n\t\t\t}\n\t\t\tend = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? \"100% 0\" : max), parsedEndTrigger, size, direction, self.scroll() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max)) || -0.001;\n\t\t\tchange = (end - start) || ((start -= 0.01) && 0.001);\n\n\t\t\toffset = 0;\n\t\t\ti = triggerIndex;\n\t\t\twhile (i--) {\n\t\t\t\tcurTrigger = _triggers[i];\n\t\t\t\tcurPin = curTrigger.pin;\n\t\t\t\tif (curPin && curTrigger.start - curTrigger._pinPush < start) {\n\t\t\t\t\tcs = curTrigger.end - curTrigger.start;\n\t\t\t\t\tcurPin === trigger && (offset += cs);\n\t\t\t\t\tcurPin === pin && (otherPinOffset += cs);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstart += offset;\n\t\t\tend += offset;\n\t\t\tself._pinPush = otherPinOffset;\n\t\t\tif (markerStart && offset) { // offset the markers if necessary\n\t\t\t\tcs = {};\n\t\t\t\tcs[direction.a] = \"+=\" + offset;\n\t\t\t\tgsap.set([markerStart, markerEnd], cs);\n\t\t\t}\n\n\t\t\tif (pin) {\n\t\t\t\tcs = _getComputedStyle(pin);\n\t\t\t\tisVertical = (direction === _vertical);\n\t\t\t\tscroll = self.scroll(); // recalculate because the triggers can affect the scroll\n\t\t\t\tpinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;\n\t\t\t\t_swapPinIn(pin, spacer, cs);\n\t\t\t\tpinState = _getState(pin);\n\t\t\t\t// transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.\n\t\t\t\tbounds = _getBounds(pin, true);\n\t\t\t\tif (pinSpacing) {\n\t\t\t\t\tspacer.style[pinSpacing + direction.os2] = change + otherPinOffset + _px;\n\t\t\t\t\tspacingActive = (pinSpacing === _padding) ? _getSize(pin, direction) + change + otherPinOffset : 0;\n\t\t\t\t\tspacingActive && (spacer.style[direction.d] = spacingActive + _px); // for box-sizing: border-box (must include padding).\n\t\t\t\t\tuseFixedPosition && self.scroll(prevScroll);\n\t\t\t\t}\n\t\t\t\tif (useFixedPosition) {\n\t\t\t\t\toverride = {\n\t\t\t\t\t\ttop: (bounds.top + (isVertical ? scroll - start : 0)) + _px,\n\t\t\t\t\t\tleft: (bounds.left + (isVertical ? 0 : scroll - start)) + _px,\n\t\t\t\t\t\tboxSizing: \"border-box\",\n\t\t\t\t\t\tposition: \"fixed\"\n\t\t\t\t\t};\n\t\t\t\t\toverride[_width] = override[\"max\" + _Width] = Math.ceil(bounds.width) + _px;\n\t\t\t\t\toverride[_height] = override[\"max\" + _Height] = Math.ceil(bounds.height) + _px;\n\t\t\t\t\toverride[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = \"0\";\n\t\t\t\t\toverride[_padding] = cs[_padding];\n\t\t\t\t\toverride[_padding + _Top] = cs[_padding + _Top];\n\t\t\t\t\toverride[_padding + _Right] = cs[_padding + _Right];\n\t\t\t\t\toverride[_padding + _Bottom] = cs[_padding + _Bottom];\n\t\t\t\t\toverride[_padding + _Left] = cs[_padding + _Left];\n\t\t\t\t\tpinActiveState = _copyState(pinOriginalState, override, pinReparent);\n\t\t\t\t}\n\t\t\t\tif (animation) { // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.\n\t\t\t\t\tanimation.progress(1, true);\n\t\t\t\t\tpinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;\n\t\t\t\t\tchange !== pinChange && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.\n\t\t\t\t\tanimation.progress(0, true);\n\t\t\t\t} else {\n\t\t\t\t\tpinChange = change\n\t\t\t\t}\n\t\t\t} else if (trigger && self.scroll()) { // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()\n\t\t\t\tbounds = trigger.parentNode;\n\t\t\t\twhile (bounds && bounds !== _body) {\n\t\t\t\t\tif (bounds._pinOffset) {\n\t\t\t\t\t\tstart -= bounds._pinOffset;\n\t\t\t\t\t\tend -= bounds._pinOffset;\n\t\t\t\t\t}\n\t\t\t\t\tbounds = bounds.parentNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0; i < triggerIndex; i++) { // make sure we revert from first to last to make sure things reach their end state properly\n\t\t\t\tcurTrigger = _triggers[i].pin;\n\t\t\t\tcurTrigger && (curTrigger === trigger || curTrigger === pin) && _triggers[i].revert(false);\n\t\t\t}\n\t\t\tself.start = start;\n\t\t\tself.end = end;\n\t\t\tscroll1 = scroll2 = self.scroll(); // reset velocity\n\t\t\tscroll1 < prevScroll && self.scroll(prevScroll);\n\t\t\tself.revert(false);\n\t\t\t_refreshing = 0;\n\t\t\tprevAnimProgress && isToggle && animation.progress(prevAnimProgress, true);\n\t\t\tif (prevProgress !== self.progress) { // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.\n\t\t\t\tscrubTween && animation.totalProgress(prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.\n\t\t\t\tself.progress = prevProgress;\n\t\t\t\tself.update();\n\t\t\t}\n\t\t\tpin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));\n\t\t\tonRefresh && onRefresh(self);\n\t\t};\n\n\t\tself.getVelocity = () => ((self.scroll() - scroll2) / (_getTime() - _time2) * 1000) || 0;\n\n\t\tself.update = (reset, recordVelocity) => {\n\t\t\tlet scroll = self.scroll(),\n\t\t\t\tp = reset ? 0 : (scroll - start) / change,\n\t\t\t\tclipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,\n\t\t\t\tprevProgress = self.progress,\n\t\t\t\tisActive, wasActive, toggleState, action, stateChanged, toggled;\n\t\t\tif (recordVelocity) {\n\t\t\t\tscroll2 = scroll1;\n\t\t\t\tscroll1 = scroll;\n\t\t\t\tif (snap) {\n\t\t\t\t\tsnap2 = snap1;\n\t\t\t\t\tsnap1 = animation && !isToggle ? animation.totalProgress() : clipped;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).\n\t\t\t(anticipatePin && !clipped && pin && !_refreshing && !_startup && _lastScrollTime && start < scroll + ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin) && (clipped = 0.0001);\n\t\t\tif (clipped !== prevProgress && self.enabled) {\n\t\t\t\tisActive = self.isActive = !!clipped && clipped < 1;\n\t\t\t\twasActive = !!prevProgress && prevProgress < 1;\n\t\t\t\ttoggled = isActive !== wasActive;\n\t\t\t\tstateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)\n\t\t\t\tself.direction = clipped > prevProgress ? 1 : -1;\n\t\t\t\tself.progress = clipped;\n\t\t\t\tif (!isToggle) {\n\t\t\t\t\tif (scrubTween && !_refreshing && !_startup) {\n\t\t\t\t\t\tscrubTween.vars.totalProgress = clipped;\n\t\t\t\t\t\tscrubTween.invalidate().restart();\n\t\t\t\t\t} else if (animation) {\n\t\t\t\t\t\tanimation.totalProgress(clipped, !!_refreshing);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pin) {\n\t\t\t\t\treset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);\n\t\t\t\t\tif (!useFixedPosition) {\n\t\t\t\t\t\tpinSetter(pinStart + pinChange * clipped);\n\t\t\t\t\t} else if (stateChanged) {\n\t\t\t\t\t\taction = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)\n\t\t\t\t\t\tif (pinReparent) {\n\t\t\t\t\t\t\tif (!_refreshing && (isActive || action)) {\n\t\t\t\t\t\t\t\tlet bounds = _getBounds(pin, true),\n\t\t\t\t\t\t\t\t\toffset = scroll - start;\n\t\t\t\t\t\t\t\tpin.style.top = (bounds.top + (direction === _vertical ? offset : 0)) + _px;\n\t\t\t\t\t\t\t\tpin.style.left = (bounds.left + (direction === _vertical ? 0 : offset)) + _px;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_reparent(pin, !_refreshing && (isActive || action) ? _body : spacer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_setState(isActive || action ? pinActiveState : pinState);\n\t\t\t\t\t\t(pinChange !== change && clipped < 1 && isActive) || pinSetter(pinStart + (clipped === 1 && !action ? pinChange : 0));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (snap && !tweenTo.tween && !_refreshing && !_startup) {\n\t\t\t\t\tscrubScrollTime = _lastScrollTime;\n\t\t\t\t\tsnapDelayedCall.restart(true);\n\t\t\t\t}\n\t\t\t\ttoggleClass && toggled && (!once || isActive) && _toArray(toggleClass.targets).forEach(el => el.classList[isActive ? \"add\" : \"remove\"](toggleClass.className)); // classes could affect positioning, so do it even if reset or refreshing is true.\n\t\t\t\tonUpdate && !isToggle && !reset && onUpdate(self);\n\t\t\t\tif (stateChanged && !_refreshing) {\n\t\t\t\t\ttoggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.\n\t\t\t\t\tif (isToggle) {\n\t\t\t\t\t\taction = (!toggled && toggleActions[toggleState + 1] !== \"none\" && toggleActions[toggleState + 1]) || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the \"enter\" action, we should switch to the \"leave\" in this case (but only if one is defined)\n\t\t\t\t\t\tif (animation && (action === \"complete\" || action === \"reset\" || action in animation)) {\n\t\t\t\t\t\t\tif (action === \"complete\") {\n\t\t\t\t\t\t\t\tanimation.pause().totalProgress(1);\n\t\t\t\t\t\t\t} else if (action === \"reset\") {\n\t\t\t\t\t\t\t\tanimation.restart(true).pause();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tanimation[action]();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonUpdate && onUpdate(self);\n\t\t\t\t\t}\n\t\t\t\t\tif (toggled || !_limitCallbacks) { // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.\n\t\t\t\t\t\tonToggle && toggled && onToggle(self);\n\t\t\t\t\t\tcallbacks[toggleState] && callbacks[toggleState](self);\n\t\t\t\t\t\tonce && (clipped === 1 ? self.kill(false, 1) : (callbacks[toggleState] = 0)); // a callback shouldn't be called again if once is true.\n\t\t\t\t\t\tif (!toggled) { // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order\n\t\t\t\t\t\t\ttoggleState = clipped === 1 ? 1 : 3;\n\t\t\t\t\t\t\tcallbacks[toggleState] && callbacks[toggleState](self);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (isToggle && onUpdate && !_refreshing) {\n\t\t\t\t\tonUpdate(self);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// update absolutely-positioned markers (only if the scroller isn't the viewport)\n\t\t\tif (markerEndSetter) {\n\t\t\t\tmarkerStartSetter(scroll + (markerStartTrigger._isFlipped ? 1 : 0));\n\t\t\t\tmarkerEndSetter(scroll);\n\t\t\t}\n\t\t};\n\n\t\tself.enable = () => {\n\t\t\tif (!self.enabled) {\n\t\t\t\tself.enabled = true;\n\t\t\t\t_addListener(scroller, \"resize\", _onResize);\n\t\t\t\t_addListener(scroller, \"scroll\", _onScroll);\n\t\t\t\tonRefreshInit && _addListener(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\t\t\t\t!animation || !animation.add ? self.refresh() : gsap.delayedCall(0.01, self.refresh) && (change = 0.01) && (start = end = 0); // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick.\n\t\t\t}\n\t\t};\n\n\t\tself.disable = (reset, allowScrub) => {\n\t\t\tif (self.enabled) {\n\t\t\t\treset !== false && self.revert();\n\t\t\t\tself.enabled = self.isActive = false;\n\t\t\t\tallowScrub || (scrubTween && scrubTween.pause());\n\t\t\t\tprevScroll = 0;\n\t\t\t\tpinCache && (pinCache.uncache = 1);\n\t\t\t\tonRefreshInit && _removeListener(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\t\t\t\tif (snapDelayedCall) {\n\t\t\t\t\tsnapDelayedCall.pause();\n\t\t\t\t\ttweenTo.tween && tweenTo.tween.kill();\n\t\t\t\t}\n\t\t\t\tif (!isViewport) {\n\t\t\t\t\tlet i = _triggers.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (_triggers[i].scroller === scroller && _triggers[i] !== self) {\n\t\t\t\t\t\t\treturn; //don't remove the listeners if there are still other triggers referencing it.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t_removeListener(scroller, \"resize\", _onResize);\n\t\t\t\t\t_removeListener(scroller, \"scroll\", _onScroll);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tself.kill = (revert, allowScrub) => {\n\t\t\tself.disable(revert, allowScrub);\n\t\t\tid && (delete _ids[id]);\n\t\t\tlet i = _triggers.indexOf(self);\n\t\t\t_triggers.splice(i, 1);\n\t\t\ti === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...\n\t\t\tif (animation) {\n\t\t\t\tanimation.scrollTrigger = null;\n\t\t\t\trevert && animation.render(-1);\n\t\t\t\t(allowScrub && scrubTween) || animation.kill();\n\t\t\t}\n\t\t\tmarkerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.parentNode.removeChild(m));\n\t\t\tpinCache && (pinCache.uncache = 1);\n\t\t};\n\n\t\tself.enable();\n\t}\n\n\n\tstatic register(core) {\n\t\tif (!_coreInitted) {\n\t\t\tgsap = core || _getGSAP();\n\t\t\tif (_windowExists() && window.document) {\n\t\t\t\t_win = window;\n\t\t\t\t_doc = document;\n\t\t\t\t_docEl = _doc.documentElement;\n\t\t\t\t_body = _doc.body;\n\t\t\t}\n\t\t\tif (gsap) {\n\t\t\t\t_toArray = gsap.utils.toArray;\n\t\t\t\t_clamp = gsap.utils.clamp;\n\t\t\t\tgsap.core.globals(\"ScrollTrigger\", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a \"name\" property.\n\t\t\t\tif (_body) {\n\t\t\t\t\t_raf = _win.requestAnimationFrame || (f => setTimeout(f, 16));\n\t\t\t\t\t_addListener(_win, \"mousewheel\", _onScroll);\n\t\t\t\t\t_root = [_win, _doc, _docEl, _body];\n\t\t\t\t\t_addListener(_doc, \"scroll\", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!\n\t\t\t\t\tlet bodyStyle = _body.style,\n\t\t\t\t\t\tborder = bodyStyle.borderTop,\n\t\t\t\t\t\tbounds;\n\t\t\t\t\tbodyStyle.borderTop = \"1px solid #000\"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.\n\t\t\t\t\tbounds = _getBounds(_body);\n\t\t\t\t\t_vertical.m = Math.round(bounds.top + _vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding\n\t\t\t\t\t_horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;\n\t\t\t\t\tborder ? (bodyStyle.borderTop = border) : bodyStyle.removeProperty(\"border-top\");\n\t\t\t\t\t_syncInterval = setInterval(_sync, 200);\n\t\t\t\t\tgsap.delayedCall(0.5, () => _startup = 0);\n\t\t\t\t\t_addListener(_doc, \"touchcancel\", _passThrough); // some older Android devices intermittently stop dispatching \"touchmove\" events if we don't listen for \"touchcancel\" on the document.\n\t\t\t\t\t_addListener(_body, \"touchstart\", _passThrough); //works around Safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n\t\t\t\t\t_multiListener(_addListener, _doc, \"pointerdown,touchstart,mousedown\", () => _pointerIsDown = 1);\n\t\t\t\t\t_multiListener(_addListener, _doc, \"pointerup,touchend,mouseup\", () => _pointerIsDown = 0);\n\t\t\t\t\t_transformProp = gsap.utils.checkPrefix(\"transform\");\n\t\t\t\t\t_stateProps.push(_transformProp);\n\t\t\t\t\t_coreInitted = _getTime();\n\t\t\t\t\t_resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();\n\t\t\t\t\t_autoRefresh = [_doc, \"visibilitychange\", () => {\n\t\t\t\t\t\tlet w = _win.innerWidth,\n\t\t\t\t\t\t\th = _win.innerHeight;\n\t\t\t\t\t\tif (_doc.hidden) {\n\t\t\t\t\t\t\t_prevWidth = w;\n\t\t\t\t\t\t\t_prevHeight = h;\n\t\t\t\t\t\t} else if (_prevWidth !== w || _prevHeight !== h) {\n\t\t\t\t\t\t\t_onResize();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, _doc, \"DOMContentLoaded\", _refreshAll, _win, \"load\", () => _lastScrollTime || _refreshAll(), _win, \"resize\", _onResize];\n\t\t\t\t\t_iterateAutoRefresh(_addListener);\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn _coreInitted;\n\t}\n\n\tstatic defaults(config) {\n\t\tfor (let p in config) {\n\t\t\t_defaults[p] = config[p];\n\t\t}\n\t}\n\n\tstatic kill() {\n\t\t_enabled = 0;\n\t\t_triggers.slice(0).forEach(trigger => trigger.kill(1));\n\t}\n\n\tstatic config(vars) {\n\t\t(\"limitCallbacks\" in vars) && (_limitCallbacks = !!vars.limitCallbacks);\n\t\tlet ms = vars.syncInterval;\n\t\tms && clearInterval(_syncInterval) || ((_syncInterval = ms) && setInterval(_sync, ms));\n\t\t(\"autoRefreshEvents\" in vars) && (_iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || \"none\"));\n\t}\n\n\tstatic scrollerProxy(target, vars) {\n\t\tlet t = _toArray(target)[0];\n\t\t_isViewport(t) ? _proxies.unshift(_win, vars, _body, vars, _docEl, vars) : _proxies.unshift(t, vars);\n\t}\n\n\tstatic matchMedia(vars) {\n\t\tlet mq, p, i, func, result;\n\t\tfor (p in vars) {\n\t\t\ti = _media.indexOf(p);\n\t\t\tfunc = vars[p];\n\t\t\t_creatingMedia = p;\n\t\t\tif (p === \"all\") {\n\t\t\t\tfunc();\n\t\t\t} else {\n\t\t\t\tmq = _win.matchMedia(p);\n\t\t\t\tif (mq) {\n\t\t\t\t\tmq.matches && (result = func());\n\t\t\t\t\tif (~i) {\n\t\t\t\t\t\t_media[i + 1] = _combineFunc(_media[i + 1], func);\n\t\t\t\t\t\t_media[i + 2] = _combineFunc(_media[i + 2], result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti = _media.length;\n\t\t\t\t\t\t_media.push(p, func, result);\n\t\t\t\t\t\tmq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener(\"change\", _onMediaChange);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t_creatingMedia = 0;\n\t\t}\n\t\treturn _media;\n\t}\n\n}\n\nScrollTrigger.version = \"3.4.1\";\nScrollTrigger.saveStyles = targets => targets ? _toArray(targets).forEach(target => {\n\tlet i = _savedStyles.indexOf(target);\n\ti >= 0 && _savedStyles.splice(i, 4);\n\t_savedStyles.push(target, target.style.cssText, gsap.core.getCache(target), _creatingMedia);\n}) : _savedStyles;\nScrollTrigger.revert = (soft, media) => _revertAll(!soft, media);\nScrollTrigger.create = (vars, animation) => new ScrollTrigger(vars, animation);\nScrollTrigger.refresh = safe => safe ? _onResize() : _refreshAll(true);\nScrollTrigger.update = _updateAll;\nScrollTrigger.maxScroll = (element, horizontal) => _maxScroll(element, horizontal ? _horizontal : _vertical);\nScrollTrigger.getScrollFunc = (element, horizontal) => _getScrollFunc(_toArray(element)[0], horizontal ? _horizontal : _vertical);\nScrollTrigger.getById = id => _ids[id];\nScrollTrigger.getAll = () => _triggers.slice(0);\nScrollTrigger.isScrolling = () => !!_lastScrollTime;\nScrollTrigger.addEventListener = (type, callback) => {\n\tlet a = _listeners[type] || (_listeners[type] = []);\n\t~a.indexOf(callback) || a.push(callback);\n};\nScrollTrigger.removeEventListener = (type, callback) => {\n\tlet a = _listeners[type],\n\t\ti = a && a.indexOf(callback);\n\ti >= 0 && a.splice(i, 1);\n};\nScrollTrigger.batch = (targets, vars) => {\n\tlet result = [],\n\t\tvarsCopy = {},\n\t\tinterval = vars.interval || 0.016,\n\t\tbatchMax = vars.batchMax || 1e9,\n\t\tproxyCallback = (type, callback) => {\n\t\t\tlet elements = [],\n\t\t\t\ttriggers = [],\n\t\t\t\tdelay = gsap.delayedCall(interval, () => {callback(elements, triggers); elements = []; triggers = [];}).pause();\n\t\t\treturn self => {\n\t\t\t\telements.length || delay.restart(true);\n\t\t\t\telements.push(self.trigger);\n\t\t\t\ttriggers.push(self);\n\t\t\t\tbatchMax <= elements.length && delay.progress(1);\n\t\t\t};\n\t\t},\n\t\tp;\n\tfor (p in vars) {\n\t\tvarsCopy[p] = (p.substr(0, 2) === \"on\" && _isFunction(vars[p]) && p !== \"onRefreshInit\") ? proxyCallback(p, vars[p]) : vars[p];\n\t}\n\tif (_isFunction(batchMax)) {\n\t\tbatchMax = batchMax();\n\t\t_addListener(ScrollTrigger, \"refresh\", () => batchMax = vars.batchMax());\n\t}\n\t_toArray(targets).forEach(target => {\n\t\tlet config = {};\n\t\tfor (p in varsCopy) {\n\t\t\tconfig[p] = varsCopy[p];\n\t\t}\n\t\tconfig.trigger = target;\n\t\tresult.push(ScrollTrigger.create(config));\n\t});\n\treturn result;\n}\nScrollTrigger.sort = func => _triggers.sort(func || ((a, b) => (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6)));\n\n_getGSAP() && gsap.registerPlugin(ScrollTrigger);\n\nexport { ScrollTrigger as default };"],"names":["_passThrough","v","_windowExists","window","_getGSAP","gsap","registerPlugin","_isViewport","e","_root","indexOf","_getProxyProp","element","property","_proxies","_getScrollFunc","s","sc","i","_scrollers","func","value","arguments","length","push","_getBoundsFunc","_winOffsets","width","_win","innerWidth","height","innerHeight","_getBounds","_maxScroll","d2","d","a","Math","max","_docEl","_body","_iterateAutoRefresh","events","_autoRefresh","_isString","_isFunction","_isNumber","_isObject","_callIfFunc","_combineFunc","f1","f2","result1","result2","_getComputedStyle","getComputedStyle","_setDefaults","obj","defaults","p","_getSize","_multiListener","types","callback","split","forEach","type","_addListener","addEventListener","passive","_removeListener","removeEventListener","_offsetToPx","size","eqIndex","relative","charAt","parseFloat","substr","_keywords","_createMarker","name","container","direction","offset","matchWidthEl","startColor","endColor","fontSize","indent","fontWeight","_doc","createElement","useFixedPosition","isScroller","parent","isStart","color","css","_vertical","_right","_bottom","offsetWidth","_isStart","setAttribute","style","cssText","innerText","insertBefore","children","_offset","op","_positionMarker","_sync","_request","_raf","_updateAll","_onScroll","_lastScrollTime","_dispatch","_getTime","_onResize","_refreshing","_resizeDelay","restart","_onMediaChange","tick","ticker","frame","matches","_lastMediaTick","_startup","_revertAll","_media","matchMedia","_revertRecorded","_creatingMedia","_refreshAll","_softRefresh","ScrollTrigger","_swapPinIn","pin","spacer","cs","parentNode","_propNamesToCopy","spacerStyle","pinStyle","position","display","overflow","boxSizing","_width","_horizontal","_px","_height","_padding","_margin","_left","appendChild","_getState","l","_stateProps","state","t","_parsePosition","trigger","scrollerSize","scroll","marker","markerScroller","self","scrollerBounds","borderWidth","scrollerMax","localOffset","globalOffset","_toArray","bounds","offsets","left","top","removeProperty","m","round","_getTweenCreator","scroller","lastScroll","getScroll","prop","p2","getTween","scrollTo","vars","initialValue","change1","change2","tween","onComplete","modifiers","kill","abs","ratio","call","to","_coreInitted","_clamp","_time2","_syncInterval","_pointerIsDown","_transformProp","_i","_prevWidth","_prevHeight","_sort","_limitCallbacks","Date","now","_time1","_enabled","_abs","_scrollLeft","_scrollTop","_Right","_Left","_Top","_Bottom","_Width","_Height","os","os2","pageXOffset","pageYOffset","withoutTransforms","x","y","xPercent","yPercent","rotation","rotationX","rotationY","scale","skewX","skewY","progress","getBoundingClientRect","_markerDefaults","_defaults","toggleActions","anticipatePin","center","bottom","right","start","flipped","side","oppositeSide","_isFlipped","set","_triggers","_ids","_listeners","_emptyArray","map","f","_savedStyles","media","uncache","rec","revert","force","skipRevert","refreshInits","sort","refresh","result","render","_lastScroll","_direction","time","recordVelocity","update","concat","_capsExp","_setState","replace","toLowerCase","_prefixExp","init","animation","this","tweenTo","pinCache","snapFunc","isReverted","scroll1","scroll2","end","markerStart","markerEnd","markerStartTrigger","markerEndTrigger","markerVars","change","pinOriginalState","pinActiveState","pinState","pinGetter","pinSetter","pinStart","pinChange","spacingStart","spacingActive","markerStartSetter","markerEndSetter","snap1","snap2","scrubScrollTime","scrubTween","scrubSmooth","snapDurClamp","snapDelayedCall","prevProgress","prevScroll","prevAnimProgress","nodeType","horizontal","onUpdate","toggleClass","id","onToggle","onRefresh","scrub","pinSpacing","invalidateOnRefresh","onScrubComplete","onSnapComplete","once","snap","pinReparent","isToggle","scrollerCache","core","getCache","isViewport","callbacks","onEnter","onLeave","onEnterBack","onLeaveBack","markers","onRefreshInit","getScrollerSize","_getSizeFunc","getScrollerOffsets","_getOffsetsFunc","tweenScroll","lazy","_initted","immediateRender","pause","scrollTrigger","ease","duration","snapTo","scrollBehavior","_getLabels","labels","utils","min","delayedCall","delay","totalProgress","velocity","naturalEnd","endValue","endScroll","data","targets","className","force3D","getProperty","quickSetter","_makePositionable","r","enabled","prevRefreshing","_swapPinOut","removeChild","soft","invalidate","isVertical","override","curTrigger","curPin","otherPinOffset","parsedEnd","parsedEndTrigger","endTrigger","parsedStart","triggerIndex","_pinPush","ceil","_copyState","omitOffsets","splice","_pinOffset","getVelocity","reset","isActive","toggleState","action","stateChanged","toggled","clipped","_reparent","_stOrig","test","el","classList","enable","add","disable","allowScrub","register","document","documentElement","body","toArray","clamp","globals","requestAnimationFrame","setTimeout","bodyStyle","border","borderTop","setInterval","checkPrefix","w","h","hidden","config","slice","limitCallbacks","ms","syncInterval","clearInterval","autoRefreshEvents","scrollerProxy","target","unshift","mq","addListener","console","warn","version","saveStyles","create","safe","maxScroll","getScrollFunc","getById","getAll","isScrolling","batch","proxyCallback","elements","triggers","interval","batchMax","varsCopy","b","refreshPriority"],"mappings":"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"}